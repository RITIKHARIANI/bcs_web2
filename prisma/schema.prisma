generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model course_modules {
  id           String   @id
  course_id    String
  module_id    String
  sort_order   Int
  custom_title String?
  created_at   DateTime @default(now())
  courses      courses  @relation(fields: [course_id], references: [id], onDelete: Cascade)
  modules      modules  @relation(fields: [module_id], references: [id], onDelete: Cascade)

  @@unique([course_id, module_id])
  @@unique([course_id, sort_order])
  @@index([course_id])
  @@index([module_id])
}

model courses {
  id             String           @id
  title          String
  slug           String           @unique
  description    String?
  author_id      String
  status         String           @default("draft")
  featured       Boolean          @default(false)
  tags           String[]
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  course_modules course_modules[]
  users          users            @relation(fields: [author_id], references: [id])

  @@index([author_id])
  @@index([slug])
  @@index([status])
}

model media_files {
  id             String         @id
  filename       String
  original_name  String
  file_size      BigInt
  mime_type      String
  storage_path   String
  thumbnail_path String?
  uploaded_by    String
  created_at     DateTime       @default(now())
  users          users          @relation(fields: [uploaded_by], references: [id])
  module_media   module_media[]

  @@index([mime_type])
  @@index([uploaded_by])
}

model module_media {
  id            String      @id
  module_id     String
  media_file_id String
  created_at    DateTime    @default(now())
  media_files   media_files @relation(fields: [media_file_id], references: [id], onDelete: Cascade)
  modules       modules     @relation(fields: [module_id], references: [id], onDelete: Cascade)

  @@unique([module_id, media_file_id])
  @@index([media_file_id])
  @@index([module_id])
}

model modules {
  id               String           @id
  title            String
  slug             String
  content          String?
  description      String?
  author_id        String
  parent_module_id String?
  sort_order       Int              @default(0)
  module_number    String?
  status           String           @default("draft")
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  course_modules   course_modules[]
  module_media     module_media[]
  users            users            @relation(fields: [author_id], references: [id])
  modules          modules?         @relation("modulesTomodules", fields: [parent_module_id], references: [id])
  other_modules    modules[]        @relation("modulesTomodules")

  @@unique([parent_module_id, sort_order])
  @@index([author_id])
  @@index([parent_module_id])
  @@index([status])
}

model sessions {
  id            String   @id
  session_token String   @unique
  user_id       String
  expires       DateTime
  created_at    DateTime @default(now())
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model users {
  id            String        @id
  email         String        @unique
  password_hash String
  name          String
  role          String        @default("faculty")
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  courses       courses[]
  media_files   media_files[]
  modules       modules[]
  sessions      sessions[]
}
