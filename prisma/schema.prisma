generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model course_modules {
  id           String   @id
  course_id    String
  module_id    String
  sort_order   Int
  custom_title String?
  created_at   DateTime @default(now())
  courses      courses  @relation(fields: [course_id], references: [id], onDelete: Cascade)
  modules      modules  @relation(fields: [module_id], references: [id], onDelete: Cascade)

  @@unique([course_id, module_id])
  @@unique([course_id, sort_order])
  @@index([course_id])
  @@index([module_id])
}

model courses {
  id             String           @id
  title          String
  slug           String           @unique
  description    String?
  author_id      String
  status         String           @default("draft")
  featured       Boolean          @default(false)
  tags           String[]
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  course_modules course_modules[]
  users          users            @relation(fields: [author_id], references: [id], onDelete: Restrict)

  @@index([author_id])
  @@index([slug])
  @@index([status])
}

model media_files {
  id             String         @id
  filename       String
  original_name  String
  file_size      BigInt
  mime_type      String
  storage_path   String
  thumbnail_path String?
  uploaded_by    String
  created_at     DateTime       @default(now())
  users          users          @relation(fields: [uploaded_by], references: [id], onDelete: Restrict)
  module_media   module_media[]

  @@index([mime_type])
  @@index([uploaded_by])
}

model module_media {
  id            String      @id
  module_id     String
  media_file_id String
  created_at    DateTime    @default(now())
  media_files   media_files @relation(fields: [media_file_id], references: [id], onDelete: Cascade)
  modules       modules     @relation(fields: [module_id], references: [id], onDelete: Cascade)

  @@unique([module_id, media_file_id])
  @@index([media_file_id])
  @@index([module_id])
}

model modules {
  id               String           @id
  title            String
  slug             String
  content          String?
  description      String?
  author_id        String
  parent_module_id String?
  sort_order       Int              @default(0)
  module_number    String?
  status           String           @default("draft")
  tags             String[]         @default([])
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  course_modules   course_modules[]
  module_media     module_media[]
  users            users            @relation(fields: [author_id], references: [id], onDelete: Restrict)
  modules          modules?         @relation("modulesTomodules", fields: [parent_module_id], references: [id])
  other_modules    modules[]        @relation("modulesTomodules")

  @@unique([parent_module_id, sort_order])
  @@index([author_id])
  @@index([parent_module_id])
  @@index([status])
  @@index([tags])
}

model sessions {
  id            String   @id
  session_token String   @unique
  user_id       String
  expires       DateTime
  created_at    DateTime @default(now())
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model users {
  id                     String        @id
  email                  String        @unique
  password_hash          String
  name                   String
  role                   String        @default("faculty")

  // Profile fields
  about                  String?       @db.Text
  speciality             String?
  interested_fields      String[]      @default([])
  university             String?
  avatar_url             String?

  // Email verification
  email_verified         Boolean       @default(false)
  email_verified_at      DateTime?
  email_verification_token String?     @unique

  // Password reset
  password_reset_token   String?       @unique
  password_reset_expires DateTime?

  created_at             DateTime      @default(now())
  updated_at             DateTime      @updatedAt

  courses                courses[]
  media_files            media_files[]
  modules                modules[]
  sessions               sessions[]
  playgrounds            playgrounds[]
  playground_templates   playground_templates[]
}

// ==================== PLAYGROUND BUILDER MODELS ====================

model playground_templates {
  id                String   @id @default(cuid())
  name              String
  description       String
  category          String   // neural_networks, physics, algorithms, etc.
  thumbnail         String?

  // Default configuration (stored as JSON)
  default_controls       Json    // ControlConfig[]
  default_visualization  Json    // VisualizationConfig
  code_template          String  @db.Text

  // Required libraries
  python_libraries  String[]
  js_libraries      String[]

  // Metadata
  author_id         String?
  version           String   @default("1.0.0")
  tags              String[]
  is_public         Boolean  @default(true)

  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  author            users?   @relation(fields: [author_id], references: [id], onDelete: SetNull)
  playgrounds       playgrounds[]

  @@index([category])
  @@index([author_id])
  @@index([is_public])
}

model playgrounds {
  id                String   @id @default(cuid())
  title             String
  description       String   @db.Text
  category          String

  // Ownership & Permissions
  created_by        String
  organization_id   String?
  is_public         Boolean  @default(false)
  share_url         String   @unique @default(cuid())

  // Template & Configuration
  template_id       String?
  controls          Json     // ControlConfig[]
  visualization     Json     // VisualizationConfig
  code_config       Json     // CodeConfig (language, content, libraries)

  // Metadata
  published_at      DateTime?
  version           Int      @default(1)

  // Analytics
  view_count        Int      @default(0)
  fork_count        Int      @default(0)
  rating            Float?

  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  author            users    @relation(fields: [created_by], references: [id], onDelete: Cascade)
  template          playground_templates? @relation(fields: [template_id], references: [id], onDelete: SetNull)

  @@index([created_by])
  @@index([template_id])
  @@index([category])
  @@index([is_public])
  @@index([share_url])
}
